version: '3.8'

services:
  app:
    build: src
    container_name: customer-api-service
    ports:
      - '8080:8080'
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/customer-db
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: 123
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
    networks:
      - tcnetwork

  db:
    image: 'postgres:latest'
    container_name: customer-db
    restart: always
    hostname: postgres
    environment:
      POSTGRES_DB: customer-db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 123
    ports:
      - '5432:5432'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - db:/var/lib/postgresql/data
    networks:
      - tcnetwork

  redis:
    image: redis:7
    container_name: redis
    restart: always
    ports:
      - '6379:6379'
    networks:
      - tcnetwork

volumes:
  db:
    driver: local

networks:
  tcnetwork:
    name: tech-challenge-network
